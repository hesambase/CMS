@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using BlazorConduit.Client.Services.Contracts
@using BlazorConduit.Client.Store.State
@using Fluxor

@inject IState<UserState> State
@inject ITokenService TokenService
@inject NavigationManager Navigation
@inject IStateFacade StateFacade

<nav class="navbar navbar-light">
    <div class="container">
        <a class="navbar-brand" href="/">conduit</a>
        <ul class="nav navbar-nav pull-xs-right">
            <li class="nav-item">
                <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                    Home
                </NavLink>
            </li>
            @if (State.Value.IsAuthenticated && !string.IsNullOrWhiteSpace(existingUsername))
            {
                <li class="nav-item">
                    <NavLink class="nav-link" href="/editor">
                        <i class="ion-compose"></i>
                        New Article
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/settings">
                        <i class="ion-gear-a"></i>
                        Settings
                    </NavLink>
                </li>
                <li style="cursor: pointer;" class="nav-item">
                    <NavLink class="nav-link" @onclick="() => StateFacade.GetUserProfile(existingUsername)">
                        <img class="user-pic" src="@State.Value.CurrentUser?.Image" />
                        @existingUsername
                    </NavLink>
                </li>
            }
            else
            {
                <li class="nav-item">
                    <NavLink class="nav-link" href="/login">
                        Sign In
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/register">
                        Sign Up
                    </NavLink>
                </li>
            }
        </ul>
    </div>
</nav>

@code {        

    private string? existingUsername;

    private string profileNavigationUrl => $"/profile/{existingUsername}";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        existingUsername = await TokenService.GetUsernameFromExistingTokenAsync();

        // On successful register or login, re-render the nav bar to display the username
        State.StateChanged += GetUsernameOnLoginOrRegistration;

        if (string.IsNullOrWhiteSpace(existingUsername))
        {
            // Attempt to retrieve the current user if the token is available
            var currentToken = await TokenService.GetTokenAsync();

            if (string.IsNullOrWhiteSpace(currentToken))
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                StateFacade.GetCurrentUser(currentToken);
            }
        }
        else if (!State.Value.IsAuthenticated)
        {
            StateFacade.GetCurrentUser(await TokenService.GetTokenAsync());
        }
    }

    private void GetUsernameOnLoginOrRegistration(object sender, UserState state)
    {
        existingUsername = State.Value.CurrentUser?.Username;

        StateHasChanged();
    }

    private void LoadCurrentUserProfile()
    {
        if (string.IsNullOrWhiteSpace(existingUsername))
        {
            return;
        }

        StateFacade.GetUserProfile(existingUsername);
    }

}
