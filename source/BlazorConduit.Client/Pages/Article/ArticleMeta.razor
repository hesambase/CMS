@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using BlazorConduit.Client.Models.Articles.Dtos 
@using BlazorConduit.Client.Services.Contracts
@using BlazorConduit.Client.Store.State
@using Fluxor 

@inject IStateFacade StateFacade
@inject NavigationManager Navigation
@inject IState<ArticleState> ArticleState
@inject IState<UserState> UserState


@if (!(Article is null))
{
    @if (isCurrentUser)
    {
        <button id="article-edit-button" class="btn btn-sm btn-outline-secondary action-btn" @onclick="OnEditArticleClicked">
            <i class="ion-gear-a"></i>
            &nbsp;
            Edit Article
        </button>
        <button id="article-delete-button" class="btn btn-outline-danger btn-sm" @onclick="() => StateFacade.DeleteArticle(Article.Slug!)">
            <i class="ion-trash-a"></i>
            &nbsp;
            Delete Article
        </button>
    }
    else if (!string.IsNullOrWhiteSpace(Article.Author?.Username))
    {
        if (IsFollowing)
        {
            <button @onclick="() => StateFacade.UnfollowUserFromArticle(Article.Author.Username)" class="btn btn-sm btn-secondary">
                <i class="ion-minus-round"></i>
                &nbsp;
                Unfollow @Article.Author.Username
            </button>
        }
        else
        {
            <button @onclick="() => StateFacade.FollowUserFromArticle(Article.Author.Username)" class="btn btn-sm btn-outline-secondary">
                <i class="ion-plus-round"></i>
                &nbsp;
                Follow @Article.Author.Username
            </button>
        }
    }

    <span>&nbsp;&nbsp;</span>

    @* Favorite button state markup *@
    @if (!isCurrentUser)
    {
        if (Article.Favorited)
        {
            <button @onclick="() => StateFacade.UnfavoritePostFromArticle(Article.Slug!)" class="btn btn-sm btn-primary">
                <i class="ion-heart"></i>
                &nbsp;
                Unfavorite Post <span class="counter">@Article.FavoritesCount</span>
            </button>
        }
        else
        {
            <button @onclick="() => StateFacade.FavoritePostFromArticle(Article.Slug!)" class="btn btn-sm btn-outline-primary">
                <i class="ion-heart"></i>
                &nbsp;
                Favorite Post <span class="counter">@Article.FavoritesCount</span>
            </button>
        }
    }
}

@code {

    private bool isCurrentUser;

    [Parameter]
    public bool IsFollowing { get; set; }

    [Parameter]
    public ArticleDto? Article { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        isCurrentUser = SetCurrentUserState();
    }

    private void OnEditArticleClicked()
    {
        if (!string.IsNullOrWhiteSpace(Article!.Slug))
        {
            Navigation.NavigateTo($"editor/{Article.Slug}");
        }
    }

    private bool SetCurrentUserState()
    {

        // No profile or current user, default to false
        if (ArticleState.Value.CurrentArticle is null || ArticleState.Value.CurrentArticle.Author is null || UserState.Value.CurrentUser is null)
        {
            return false;
        }

        // No profile or user username, default to false
        if (string.IsNullOrWhiteSpace(ArticleState.Value.CurrentArticle.Author.Username) || string.IsNullOrWhiteSpace(UserState.Value.CurrentUser.Username))
        {
            return false;
        }

        return string.Equals(ArticleState.Value.CurrentArticle.Author.Username, UserState.Value.CurrentUser.Username);
    }

}
